name: Continuous Build & Release

on:
  workflow_dispatch:
  push:
    branches: [master]
    paths:
      - "cmake_modules/**"
      - "src/**"
      - "CMakeLists.txt"
      - ".github/workflows/continuos-release.yml"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: ${{ matrix.shell }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            os_name: windows
            architecture: x86_64
            shell: msys2 {0}
            msystem: MINGW64
            install: base-devel mingw-w64-x86_64-gcc mingw-w64-x86_64-cmake mingw-w64-x86_64-hidapi make zip
          - os: ubuntu-latest
            os_name: linux
            architecture: x86_64
            shell: bash
            install: sudo apt-get -y install libhidapi-dev
          - os: macos-latest
            os_name: macos
            architecture: x86_64
            shell: bash
            install: brew install hidapi
    steps:
      - uses: actions/checkout@v4

      # Linux: Cache apt packages
      - name: Cache apt packages
        if: matrix.os_name == 'linux'
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/continuos-release.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      # macOS: Cache Homebrew
      - name: Cache Homebrew
        if: matrix.os_name == 'macos'
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            /usr/local/Cellar/hidapi
            /opt/homebrew/Cellar/hidapi
          key: ${{ runner.os }}-brew-${{ hashFiles('.github/workflows/continuos-release.yml') }}
          restore-keys: |
            ${{ runner.os }}-brew-

      # Windows: Setup MSYS2 (has built-in caching)
      - name: Setup environment
        if: matrix.os_name == 'windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msystem }}
          update: true
          install: ${{ matrix.install }}

      - name: Install dependencies
        if: matrix.os_name != 'windows'
        run: ${{ matrix.install }}

      - name: Build (Windows)
        if: matrix.os_name == 'windows'
        run: |
          mkdir build
          cd build
          cmake -G"MSYS Makefiles" -DCMAKE_BUILD_TYPE=Release ..
          make
          strip headsetcontrol.exe

      - name: Build (Linux/macOS)
        if: matrix.os_name != 'windows'
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'default'
          buildPreset: 'default'

      - name: Strip binaries (Linux/macOS)
        if: matrix.os_name != 'windows'
        run: strip build/headsetcontrol

      - name: Get version info
        id: version
        run: |
          if [ "${{ matrix.os_name }}" = "windows" ]; then
            VERSION=$(cd build && ./headsetcontrol.exe --version | head -1 || echo "unknown")
          else
            VERSION=$(cd build && ./headsetcontrol --version | head -1 || echo "unknown")
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "commit=${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT

      - name: Package artifacts
        run: |
          cd build
          if [ "${{ matrix.os_name }}" = "windows" ]; then
            zip -9 headsetcontrol-${{ matrix.os_name }}-${{ matrix.architecture }}.zip headsetcontrol.exe
          else
            zip -9 headsetcontrol-${{ matrix.os_name }}-${{ matrix.architecture }}.zip headsetcontrol
          fi
          sha256sum headsetcontrol-${{ matrix.os_name }}-${{ matrix.architecture }}.zip > headsetcontrol-${{ matrix.os_name }}-${{ matrix.architecture }}.zip.sha256

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: headsetcontrol-${{ matrix.os_name }}-${{ matrix.architecture }}
          path: |
            build/headsetcontrol-${{ matrix.os_name }}-${{ matrix.architecture }}.zip
            build/headsetcontrol-${{ matrix.os_name }}-${{ matrix.architecture }}.zip.sha256
          retention-days: 90

  create-release:
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: ./artifacts

      - name: Generate changelog
        id: changelog
        run: |
          echo "## 🚀 Continuous Build" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "Latest automated build from \`master\` branch." >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### 📦 Downloads" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          for file in artifacts/*.zip; do
            if [ -f "$file" ]; then
              basename "$file"
              echo "- [$(basename "$file")](https://github.com/${{ github.repository }}/releases/download/continuous/$(basename "$file"))" >> CHANGELOG.md
            fi
          done
          echo "" >> CHANGELOG.md
          echo "### 🔐 Checksums (SHA256)" >> CHANGELOG.md
          echo '```' >> CHANGELOG.md
          cat artifacts/*.sha256 >> CHANGELOG.md 2>/dev/null || true
          echo '```' >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### 📝 Recent Changes" >> CHANGELOG.md
          echo '```' >> CHANGELOG.md
          git log --oneline -10 >> CHANGELOG.md
          echo '```' >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "---" >> CHANGELOG.md
          echo "*Built from commit: \`${{ github.sha }}\`*" >> CHANGELOG.md

      - name: Create/Update continuous release
        uses: ncipollo/release-action@v1
        with:
          tag: continuous
          name: 'Continuous Build'
          bodyFile: CHANGELOG.md
          artifacts: "artifacts/*"
          allowUpdates: true
          removeArtifacts: true
          prerelease: true
          makeLatest: false
          token: ${{ secrets.GITHUB_TOKEN }}